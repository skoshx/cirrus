diff --git a/node_modules/meow/index.d.ts b/node_modules/meow/index.d.ts
index 00054f6..8d19681 100644
--- a/node_modules/meow/index.d.ts
+++ b/node_modules/meow/index.d.ts
@@ -26,6 +26,8 @@ type NumberFlag = Flag<'number', number> | Flag<'number', number[], true>;
 type AnyFlag = StringFlag | BooleanFlag | NumberFlag;
 type AnyFlags = Record<string, AnyFlag>;
 
+type CommandType<Flags extends AnyFlags> = (helpMessage: string, options?: Options<Flags>) => typeof meow;
+
 export interface Options<Flags extends AnyFlags> {
 	/**
 	Pass in [`import.meta`](https://nodejs.org/dist/latest/docs/api/esm.html#esm_import_meta). This is used to find the correct package.json file.
@@ -68,6 +70,27 @@ export interface Options<Flags extends AnyFlags> {
 	*/
 	readonly flags?: Flags;
 
+  /**
+  Define subcommands.
+  The key is the name of the subcommand and the value is a function that returns an instance of `meow`.
+  The following values get passed to the subcommand function:
+  - `helpText`: The help text of parent `meow` instance.
+  - `options`: The options from the parent `meow` instance.
+  @example
+  ```
+  commands: {
+    unicorn: (helpText, options) => meow({
+      ...options,
+      description: 'Subcommand description',
+      flags: {
+        unicorn: {alias: 'u'},
+      }
+    })
+  }
+  ```
+  */
+	readonly commands?: Record<string, CommandType<Flags>>;
+
 	/**
 	Description to show above the help text. Default: The package.json `"description"` property.
 
@@ -247,6 +270,11 @@ export interface Result<Flags extends AnyFlags> {
 	*/
 	flags: TypedFlags<Flags> & Record<string, unknown>;
 
+  /**
+  Parsed subcommands
+  */
+  commands: Record<string, CommandType<Flags>>;
+
 	/**
 	Flags converted camelCase including aliases.
 	*/
diff --git a/node_modules/meow/index.js b/node_modules/meow/index.js
index b255b73..47220a4 100644
--- a/node_modules/meow/index.js
+++ b/node_modules/meow/index.js
@@ -205,6 +205,16 @@ const meow = (helpText, options = {}) => {
 		}
 	}
 
+  // Subcommands
+	const commands = {};
+	for (const [command, meowInstance] of Object.entries(options.commands ?? {})) {
+		if (input[0] !== command) {
+			continue;
+		}
+
+		commands[command] = meowInstance(helpText, {...options, argv: process.argv.slice(3), commands: {}});
+	}
+
 	const flags = camelCaseKeys(argv, {exclude: ['--', /^\w$/]});
 	const unnormalizedFlags = {...flags};
 
@@ -222,6 +232,7 @@ const meow = (helpText, options = {}) => {
 
 	return {
 		input,
+    commands,
 		flags,
 		unnormalizedFlags,
 		pkg: package_,
