// functions for generating Caddyfile from Cirrus configuration
import { execaCommandSync } from 'execa';
import { readFileSync, writeFileSync } from 'fs';
import { getProjects } from '../project';
import { Deployment } from '../types';
import { readFileOrCreate } from '../util';
import { CirrusEvent, CirrusPluginOptions, CirrusPluginType } from './plugin';

export const getCaddyfilePath = () => process.env.CADDYFILE_PATH ?? '/etc/caddy/Caddyfile';

export function createCaddyfile(deployment: Deployment) {
	if (!deployment.domain) return '';
	return `
${deployment.domain} {
  encode gzip zstd
  reverse_proxy 127.0.0.1:${deployment.port}
}`;
}

export function getCaddyfile() {
	const projects = getProjects();
	let caddyDefinitions = `
# This Caddyfile is autogenerated by Cirrus.
# Modify at your own risk.
#
# Refer to the Caddy docs for more information:
# https://caddyserver.com/docs/caddyfile
`;
	for (let i = 0; i < projects.length; i++) {
		for (const deployment of projects[i].deployments) {
			caddyDefinitions += createCaddyfile(deployment);
		}
	}
	return caddyDefinitions;
}

export function shouldReloadCaddyfile() {
	// TODO(skoshx): support for custom path Caddyfileâ€¦
	// const loadedCaddyfile = readFileSync(getCaddyfilePath(), 'utf-8');
	const loadedCaddyfile = readFileOrCreate(getCaddyfilePath());
	const generatedCaddyfile = getCaddyfile();
	return loadedCaddyfile !== generatedCaddyfile;
}

function updateCaddyfile() {
	const generatedCaddyfile = getCaddyfile();
	writeFileSync(getCaddyfilePath(), generatedCaddyfile, 'utf-8');
}

export const caddy: CirrusPluginType = async (opts: CirrusPluginOptions) => {
	const triggers: CirrusEvent[] = ['init', 'delete', 'deploy'];
	if (triggers.includes(opts.event)) {
		if (shouldReloadCaddyfile()) {
			// rewrite caddyfile
			updateCaddyfile();
			// reload caddy
			if (process.env.NODE_ENV !== 'test')
				execaCommandSync(`caddy reload --config ${getCaddyfilePath()}`);
		}
	}
};
